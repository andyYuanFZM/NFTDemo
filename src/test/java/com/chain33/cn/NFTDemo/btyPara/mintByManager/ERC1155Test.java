package com.chain33.cn.NFTDemo.btyPara.mintByManager;

import java.io.IOException;
import java.util.List;

import org.junit.Test;
import com.alibaba.fastjson.JSONObject;
import cn.chain33.javasdk.client.Account;
import cn.chain33.javasdk.client.RpcClient;
import cn.chain33.javasdk.model.AccountInfo;
import cn.chain33.javasdk.model.decode.DecodeRawTransaction;
import cn.chain33.javasdk.model.rpcresult.QueryTransactionResult;
import cn.chain33.javasdk.utils.ByteUtil;
import cn.chain33.javasdk.utils.EvmUtil;
import cn.chain33.javasdk.utils.HexUtil;
import cn.chain33.javasdk.utils.TransactionUtil;

/**
 * NFT ERC1155 发行和转让
 *
 */
public class ERC1155Test {

	// 平行链所在服务器IP地址
	String ip = "localhost";
	// 平行链服务端口
	int port = 8901;
	RpcClient client = new RpcClient(ip, port);
	
    // 平行链名称，固定格式user.p.xxxx.样例中使用的名称叫mbaas， 根据自己平行链名称变化。  这个名称一定要和平行链配置文件中的名称完全一致。
	String paraName = "user.p.mbaas.";

	// 合约部署人（管理员）地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String managerAddress = "14nh6p7CUNtLXAHEiVkSd5mLUWynzafHBx";
	String managerPrivateKey = "7dfe80684f7007b2829a28c85be681304f7f4cf6081303dbace925826e2891d1";
//	String managerAddress = "替换成自己的地址，用下面createAccount方法生成";
//  String managerPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户手续费代扣地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String withholdAddress = "17RH6oiMbUjat3AAyQeifNiACPFefvz3Au";
    String withholdPrivateKey = "56d1272fcf806c3c5105f3536e39c8b33f88cb8971011dfe5886159201884763";
//	String withholdAddress = "替换成自己的地址，用下面createAccount方法生成";
//    String withholdPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户A地址和私钥
	String useraAddress;
    String useraPrivateKey;
    
    // 用户B地址和私钥
	String userbAddress;
    String userbPrivateKey;
    
    // solidity合约源码见：./solidity/ERC1155.sol
    // 合约编译出来的bytecode
    String codes = "60806040523480156200001157600080fd5b506040518060200160405280600081525062000033816200007b60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001ac565b80600290805190602001906200009392919062000097565b5050565b828054620000a59062000147565b90600052602060002090601f016020900481019282620000c9576000855562000115565b82601f10620000e457805160ff191683800117855562000115565b8280016001018555821562000115579182015b8281111562000114578251825591602001919060010190620000f7565b5b50905062000124919062000128565b5090565b5b808211156200014357600081600090555060010162000129565b5090565b600060028204905060018216806200016057607f821691505b602082108114156200017757620001766200017d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61310a80620001bc6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80634e1273f4116100715780634e1273f414610175578063a22cb465146101a5578063ab918735146101c1578063b2bdfa7b146101dd578063e985e9c5146101fb578063f242432a1461022b576100a8565b8062fdd58e146100ad57806301ffc9a7146100dd5780630e89341c1461010d5780631f04bcc71461013d5780632eb2c2d614610159575b600080fd5b6100c760048036038101906100c29190611fbe565b610247565b6040516100d49190612771565b60405180910390f35b6100f760048036038101906100f291906120b5565b610310565b6040516101049190612574565b60405180910390f35b61012760048036038101906101229190612107565b6103f2565b604051610134919061258f565b60405180910390f35b61015760048036038101906101529190611ed7565b610497565b005b610173600480360381019061016e9190611d89565b610685565b005b61018f600480360381019061018a9190612049565b610726565b60405161019c919061251b565b60405180910390f35b6101bf60048036038101906101ba9190611f82565b6108d7565b005b6101db60048036038101906101d69190611ffa565b6108ed565b005b6101e561090e565b6040516101f2919061243e565b60405180910390f35b61021560048036038101906102109190611d4d565b610934565b6040516102229190612574565b60405180910390f35b61024560048036038101906102409190611e48565b6109c8565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102af90612631565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103db57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103eb57506103ea82610a69565b5b9050919050565b606060046000838152602001908152602001600020805461041290612a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461043e90612a3d565b801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e906126d1565b60405180910390fd5b815183511461056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906125f1565b60405180910390fd5b80518351146105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a6906126b1565b60405180910390fd5b6105ca84848460405180602001604052806000815250610ad3565b60008151111561067f5760005b835181101561067d5761066a84828151811061061c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015183838151811061065d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610d4c565b808061067590612aa0565b9150506105d7565b505b50505050565b61068d610d78565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806106d357506106d2856106cd610d78565b610934565b5b610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990612671565b60405180910390fd5b61071f8585858585610d80565b5050505050565b6060815183511461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076390612711565b60405180910390fd5b6000835167ffffffffffffffff8111156107af577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107dd5781602001602082028036833780820191505090505b50905060005b84518110156108cc57610876858281518110610828577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151858381518110610869577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151610247565b8282815181106108af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050806108c590612aa0565b90506107e3565b508091505092915050565b6108e96108e2610d78565b83836110ee565b5050565b61090933848484604051806020016040528060008152506109c8565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6109d0610d78565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a165750610a1585610a10610d78565b610934565b5b610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c90612611565b60405180910390fd5b610a62858585858561125b565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610b43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3a90612751565b60405180910390fd5b8151835114610b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7e90612731565b60405180910390fd5b6000610b91610d78565b9050610ba2816000878787876114f7565b60005b8451811015610ca757838181518110610be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600080878481518110610c2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c8d9190612931565b925050819055508080610c9f90612aa0565b915050610ba5565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610d1f92919061253d565b60405180910390a4610d36816000878787876114ff565b610d4581600087878787611507565b5050505050565b80600460008481526020019081526020016000209080519060200190610d739291906119be565b505050565b600033905090565b8151835114610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb90612731565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2b90612651565b60405180910390fd5b6000610e3e610d78565b9050610e4e8187878787876114f7565b60005b845181101561104b576000858281518110610e95577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000858381518110610eda577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7290612691565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110309190612931565b925050819055505050508061104490612aa0565b9050610e51565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516110c292919061253d565b60405180910390a46110d88187878787876114ff565b6110e6818787878787611507565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561115d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611154906126f1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161124e9190612574565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290612651565b60405180910390fd5b60006112d5610d78565b905060006112e2856116ee565b905060006112ef856116ee565b90506112ff8389898585896114f7565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d90612691565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461144b9190612931565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516114c892919061278c565b60405180910390a46114de848a8a86868a6114ff565b6114ec848a8a8a8a8a6117b4565b505050505050505050565b505050505050565b505050505050565b6115268473ffffffffffffffffffffffffffffffffffffffff1661199b565b156116e6578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161156c959493929190612459565b602060405180830381600087803b15801561158657600080fd5b505af19250505080156115b757506040513d601f19601f820116820180604052508101906115b491906120de565b60015b61165d576115c3612b76565b806308c379a0141561162057506115d8612fe2565b806115e35750611622565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611617919061258f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611654906125b1565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db906125d1565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611733577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117615781602001602082028036833780820191505090505b509050828160008151811061179f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080915050919050565b6117d38473ffffffffffffffffffffffffffffffffffffffff1661199b565b15611993578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016118199594939291906124c1565b602060405180830381600087803b15801561183357600080fd5b505af192505050801561186457506040513d601f19601f8201168201806040525081019061186191906120de565b60015b61190a57611870612b76565b806308c379a014156118cd5750611885612fe2565b8061189057506118cf565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c4919061258f565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611901906125b1565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611991576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611988906125d1565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546119ca90612a3d565b90600052602060002090601f0160209004810192826119ec5760008555611a33565b82601f10611a0557805160ff1916838001178555611a33565b82800160010185558215611a33579182015b82811115611a32578251825591602001919060010190611a17565b5b509050611a409190611a44565b5090565b5b80821115611a5d576000816000905550600101611a45565b5090565b6000611a74611a6f846127da565b6127b5565b90508083825260208201905082856020860282011115611a9357600080fd5b60005b85811015611ac35781611aa98882611c12565b845260208401935060208301925050600181019050611a96565b5050509392505050565b6000611ae0611adb84612806565b6127b5565b9050808382526020820190508260005b85811015611b205781358501611b068882611d0e565b845260208401935060208301925050600181019050611af0565b5050509392505050565b6000611b3d611b3884612832565b6127b5565b90508083825260208201905082856020860282011115611b5c57600080fd5b60005b85811015611b8c5781611b728882611d38565b845260208401935060208301925050600181019050611b5f565b5050509392505050565b6000611ba9611ba48461285e565b6127b5565b905082815260208101848484011115611bc157600080fd5b611bcc8482856129fb565b509392505050565b6000611be7611be28461288f565b6127b5565b905082815260208101848484011115611bff57600080fd5b611c0a8482856129fb565b509392505050565b600081359050611c2181613078565b92915050565b600082601f830112611c3857600080fd5b8135611c48848260208601611a61565b91505092915050565b600082601f830112611c6257600080fd5b8135611c72848260208601611acd565b91505092915050565b600082601f830112611c8c57600080fd5b8135611c9c848260208601611b2a565b91505092915050565b600081359050611cb48161308f565b92915050565b600081359050611cc9816130a6565b92915050565b600081519050611cde816130a6565b92915050565b600082601f830112611cf557600080fd5b8135611d05848260208601611b96565b91505092915050565b600082601f830112611d1f57600080fd5b8135611d2f848260208601611bd4565b91505092915050565b600081359050611d47816130bd565b92915050565b60008060408385031215611d6057600080fd5b6000611d6e85828601611c12565b9250506020611d7f85828601611c12565b9150509250929050565b600080600080600060a08688031215611da157600080fd5b6000611daf88828901611c12565b9550506020611dc088828901611c12565b945050604086013567ffffffffffffffff811115611ddd57600080fd5b611de988828901611c7b565b935050606086013567ffffffffffffffff811115611e0657600080fd5b611e1288828901611c7b565b925050608086013567ffffffffffffffff811115611e2f57600080fd5b611e3b88828901611ce4565b9150509295509295909350565b600080600080600060a08688031215611e6057600080fd5b6000611e6e88828901611c12565b9550506020611e7f88828901611c12565b9450506040611e9088828901611d38565b9350506060611ea188828901611d38565b925050608086013567ffffffffffffffff811115611ebe57600080fd5b611eca88828901611ce4565b9150509295509295909350565b60008060008060808587031215611eed57600080fd5b6000611efb87828801611c12565b945050602085013567ffffffffffffffff811115611f1857600080fd5b611f2487828801611c7b565b935050604085013567ffffffffffffffff811115611f4157600080fd5b611f4d87828801611c7b565b925050606085013567ffffffffffffffff811115611f6a57600080fd5b611f7687828801611c51565b91505092959194509250565b60008060408385031215611f9557600080fd5b6000611fa385828601611c12565b9250506020611fb485828601611ca5565b9150509250929050565b60008060408385031215611fd157600080fd5b6000611fdf85828601611c12565b9250506020611ff085828601611d38565b9150509250929050565b60008060006060848603121561200f57600080fd5b600061201d86828701611c12565b935050602061202e86828701611d38565b925050604061203f86828701611d38565b9150509250925092565b6000806040838503121561205c57600080fd5b600083013567ffffffffffffffff81111561207657600080fd5b61208285828601611c27565b925050602083013567ffffffffffffffff81111561209f57600080fd5b6120ab85828601611c7b565b9150509250929050565b6000602082840312156120c757600080fd5b60006120d584828501611cba565b91505092915050565b6000602082840312156120f057600080fd5b60006120fe84828501611ccf565b91505092915050565b60006020828403121561211957600080fd5b600061212784828501611d38565b91505092915050565b600061213c8383612420565b60208301905092915050565b61215181612987565b82525050565b6000612162826128d0565b61216c81856128fe565b9350612177836128c0565b8060005b838110156121a857815161218f8882612130565b975061219a836128f1565b92505060018101905061217b565b5085935050505092915050565b6121be81612999565b82525050565b60006121cf826128db565b6121d9818561290f565b93506121e9818560208601612a0a565b6121f281612b98565b840191505092915050565b6000612208826128e6565b6122128185612920565b9350612222818560208601612a0a565b61222b81612b98565b840191505092915050565b6000612243603483612920565b915061224e82612bb6565b604082019050919050565b6000612266602883612920565b915061227182612c05565b604082019050919050565b6000612289602183612920565b915061229482612c54565b604082019050919050565b60006122ac602983612920565b91506122b782612ca3565b604082019050919050565b60006122cf602a83612920565b91506122da82612cf2565b604082019050919050565b60006122f2602583612920565b91506122fd82612d41565b604082019050919050565b6000612315603283612920565b915061232082612d90565b604082019050919050565b6000612338602a83612920565b915061234382612ddf565b604082019050919050565b600061235b601e83612920565b915061236682612e2e565b602082019050919050565b600061237e602383612920565b915061238982612e57565b604082019050919050565b60006123a1602983612920565b91506123ac82612ea6565b604082019050919050565b60006123c4602983612920565b91506123cf82612ef5565b604082019050919050565b60006123e7602883612920565b91506123f282612f44565b604082019050919050565b600061240a602183612920565b915061241582612f93565b604082019050919050565b612429816129f1565b82525050565b612438816129f1565b82525050565b60006020820190506124536000830184612148565b92915050565b600060a08201905061246e6000830188612148565b61247b6020830187612148565b818103604083015261248d8186612157565b905081810360608301526124a18185612157565b905081810360808301526124b581846121c4565b90509695505050505050565b600060a0820190506124d66000830188612148565b6124e36020830187612148565b6124f0604083018661242f565b6124fd606083018561242f565b818103608083015261250f81846121c4565b90509695505050505050565b600060208201905081810360008301526125358184612157565b905092915050565b600060408201905081810360008301526125578185612157565b9050818103602083015261256b8184612157565b90509392505050565b600060208201905061258960008301846121b5565b92915050565b600060208201905081810360008301526125a981846121fd565b905092915050565b600060208201905081810360008301526125ca81612236565b9050919050565b600060208201905081810360008301526125ea81612259565b9050919050565b6000602082019050818103600083015261260a8161227c565b9050919050565b6000602082019050818103600083015261262a8161229f565b9050919050565b6000602082019050818103600083015261264a816122c2565b9050919050565b6000602082019050818103600083015261266a816122e5565b9050919050565b6000602082019050818103600083015261268a81612308565b9050919050565b600060208201905081810360008301526126aa8161232b565b9050919050565b600060208201905081810360008301526126ca8161234e565b9050919050565b600060208201905081810360008301526126ea81612371565b9050919050565b6000602082019050818103600083015261270a81612394565b9050919050565b6000602082019050818103600083015261272a816123b7565b9050919050565b6000602082019050818103600083015261274a816123da565b9050919050565b6000602082019050818103600083015261276a816123fd565b9050919050565b6000602082019050612786600083018461242f565b92915050565b60006040820190506127a1600083018561242f565b6127ae602083018461242f565b9392505050565b60006127bf6127d0565b90506127cb8282612a6f565b919050565b6000604051905090565b600067ffffffffffffffff8211156127f5576127f4612b47565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561282157612820612b47565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561284d5761284c612b47565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561287957612878612b47565b5b61288282612b98565b9050602081019050919050565b600067ffffffffffffffff8211156128aa576128a9612b47565b5b6128b382612b98565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061293c826129f1565b9150612947836129f1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561297c5761297b612ae9565b5b828201905092915050565b6000612992826129d1565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612a28578082015181840152602081019050612a0d565b83811115612a37576000848401525b50505050565b60006002820490506001821680612a5557607f821691505b60208210811415612a6957612a68612b18565b5b50919050565b612a7882612b98565b810181811067ffffffffffffffff82111715612a9757612a96612b47565b5b80604052505050565b6000612aab826129f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ade57612add612ae9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115612b955760046000803e612b92600051612ba9565b90505b90565b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f5468652069647320616e6420616d6f756e747320617265206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f5468652069647320616e64207572697320617265206e6f74206d617463680000600082015250565b7f6f6e6c7920617574686f72697a6564206f776e65722063616e206d696e74204e60008201527f46542e0000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d1015612ff257613075565b612ffa6127d0565b60043d036004823e80513d602482011167ffffffffffffffff82111715613022575050613075565b808201805167ffffffffffffffff8111156130405750505050613075565b80602083010160043d03850181111561305d575050505050613075565b61306c82602001850186612a6f565b82955050505050505b90565b61308181612987565b811461308c57600080fd5b50565b61309881612999565b81146130a357600080fd5b50565b6130af816129a5565b81146130ba57600080fd5b50565b6130c6816129f1565b81146130d157600080fd5b5056fea2646970667358221220d2bece0d61e886387f540a6eabded1fe573f6cdf51a16398349a08e7b7faa77264736f6c63430008010033";
    // 合约对应的abi
    String abi = "[{\"inputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"constructor\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"ApprovalForAll\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"values\",\"type\": \"uint256[]\"}],\"name\": \"TransferBatch\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"value\",\"type\": \"uint256\"}],\"name\": \"TransferSingle\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": false,\"internalType\": \"string\",\"name\": \"value\",\"type\": \"string\"},{\"indexed\": true,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"URI\",\"type\": \"event\"},{\"inputs\": [],\"name\": \"_owner\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"balanceOf\",\"outputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address[]\",\"name\": \"accounts\",\"type\": \"address[]\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"}],\"name\": \"balanceOfBatch\",\"outputs\": [{\"internalType\": \"uint256[]\",\"name\": \"\",\"type\": \"uint256[]\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"}],\"name\": \"isApprovedForAll\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"_to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"string[]\",\"name\": \"uris\",\"type\": \"string[]\"}],\"name\": \"mint\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeBatchTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"setApprovalForAll\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"bytes4\",\"name\": \"interfaceId\",\"type\": \"bytes4\"}],\"name\": \"supportsInterface\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"}],\"name\": \"transferArtNFT\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"uint256\",\"name\": \"_id\",\"type\": \"uint256\"}],\"name\": \"uri\",\"outputs\": [{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\"stateMutability\": \"view\",\"type\": \"function\"}]";

    /**
     * ERC1155合约部署，调用测试
     * @throws Exception 
     */
    @Test
    public void testERC1155() throws Exception {
    	
    	
    	// =======> step1： 为用户A和B生成私钥和地址
    	AccountInfo infoA = createAccount();
    	useraAddress = infoA.getAddress();
    	useraPrivateKey = infoA.getPrivateKey();
    	
    	AccountInfo infoB = createAccount();
    	userbAddress = infoB.getAddress();
    	userbPrivateKey = infoB.getPrivateKey();
    	
    	// =======>  step2: 通过管理员部署合约，部署好之后，合约就运行区块链内存中，后续可以直接调用，不用每次都调用部署合约这一步操作（除非业务上有需要）
        // 部署合约, 参数： 平行链合约名， 签名地址，签名私钥
        String hash = deployContract(paraName, managerAddress, managerPrivateKey);
        
        // 计算上一步部署到链上的合约地址
        String contractAddress = TransactionUtil.convertExectoAddr(managerAddress + hash.substring(2));
        System.out.println("部署好的合约地址 = " + contractAddress);
        
        // =======>  step3: 调用合约发行NFT,假设为2件游戏道具各生成100个NFT资产, id从10000开始
                
        int lenght = 100;
        // tokenId数组
        int[] ids = new int[lenght];
        // 同一个tokenid发行多少份
        int[] amounts = new int[lenght];
        // 每一个tokenid对应的URI信息（一般对应存放图片的描述信息，图片内容的一个url）
        String[] uris = new String[lenght];
        for (int i = 0; i < lenght; i++) {
        	ids[i] = 10000 + i;
        	amounts[i] = 100;
        	// 例子为了简化处理，让所有ID都固定一个地址，
        	uris[i] = "http://www.baidu.com";
        }
        // 构造合约调用, mint对应solidity合约里的方法名， useraAddress, ids, amounts这三项对应合约里的参数。  将NFT发行在用户A地址下
        byte[] initNFT = EvmUtil.encodeParameter(abi, "mint", useraAddress, ids, amounts, uris);

        hash = callContract(initNFT, contractAddress, managerAddress, managerPrivateKey, paraName);
        
        // =======>  查询用户A地址下的余额
        byte[] packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[0] + "余额");
        
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[1]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[1] + "余额");
        
        // =======>  从A地址向B地址转账,使用代扣交易
        // 代扣交易需要对平行链合约地址做一个处理
        String execer = paraName + "evm";
        // 平行链合约地址计算(平行链title前缀+合约名称)
        String paracontractAddress = client.convertExectoAddr(execer);
        // 用户A将第1个NFT中的50个转给用户B
    	byte[] transfer = EvmUtil.encodeParameter(abi, "transferArtNFT", userbAddress, ids[0], 50);
    	// 构造转账交易体，先用用户A对此笔交易签名，
    	String txEncode = EvmUtil.callEvmContractWithhold(transfer,"", 0, execer, useraPrivateKey, contractAddress);
    	    	
    	// 再调用代扣交易方法，用代扣私钥对交易组做签名
    	createNobalance(txEncode, paracontractAddress, useraPrivateKey, withholdPrivateKey);
        
        // =======>  查询用户A地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户A,NFTID=" + ids[0] + "余额");
        
        // =======>  查询用户B地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", userbAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户B,NFTID=" + ids[0] + "余额");
        
        // =======>  查询指定tokenid的uri信息
        packAbiGet = EvmUtil.encodeParameter(abi, "uri", ids[0]);
        queryContractString(packAbiGet, contractAddress, "NFTID=" + ids[0] + "的URI信息");
        
        // =======>  查询指定tokenid的uri信息
        packAbiGet = EvmUtil.encodeParameter(abi, "uri", ids[1]);
        queryContractString(packAbiGet, contractAddress, "NFTID=" + ids[1] + "的URI信息");
        
    }
        
    /**
     * Step1: 生成私钥，地址
     * 一般在用户注册时调用，生成后在数据库中和用户信息绑定，后续直接从库中查出来使用
     */
    private AccountInfo createAccount() {
    	Account account = new Account();
		AccountInfo accountInfo = account.newAccountLocal();
		return accountInfo;
    }
    
    /**
     * Step2:部署合约
     * @throws Exception
     */
    private String deployContract(String execer, String address, String privateKey) throws Exception {

        // 部署合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
        
        byte[] code = ByteUtil.merge(HexUtil.fromHexString(codes), abi.getBytes());
        
    	// 估算部署合约GAS费
        String evmCode = EvmUtil.getCreateEvmEncode(code, "", "deploy ERC1155 contract", execer);
        long gas = client.queryEVMGas("evm", evmCode, address);
        System.out.println("Gas fee is:" + gas);
        
        // 通过合约code, 管理员私钥，平行链名称+evm,手续费等参数构造部署合约交易，并签名
        txEncode = EvmUtil.createEvmContract(code, "", "evm-sdk-test", privateKey, execer, gas);
        // 将构造并签好名的交易通过rpc接口发送到平行链上
        txhash = client.submitTransaction(txEncode);
        System.out.println("部署合约交易hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约部署成功");

		} else {
			System.out.println("合约部署失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    }
    
    /**
     * Step3: 调用合约
     * @param contractAddr
     * @param address
     * @param privateKey
     * @throws IOException 
     * @throws InterruptedException 
     */
    private String callContract(byte[] code, String contractAddr, String address, String privateKey, String execer) throws Exception {
    	
        // 调用合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
        
        // 估算合约执行GAS费
        String evmCode = EvmUtil.getCallEvmEncode(code, "", 0, contractAddr, execer);
        long gas = client.queryEVMGas("evm", evmCode, address);
        System.out.println("Gas fee is:" + gas);
        
        long fee = gas + 100000;
    	txEncode = EvmUtil.callEvmContract(code,"", 0, contractAddr, privateKey, execer, fee);
    	
        txhash = client.submitTransaction(txEncode);
        System.out.println("调用合约hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    	
    }
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContract(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToAlgorism(HexUtil.removeHexHeader(rawData)));
    }
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContractString(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToString(HexUtil.removeHexHeader(rawData)).replaceAll("\u0000",""));
    }
          
    
    /**
     * 构建代扣手续费交易
     * 
     * @param txEncode
     * @param contranctAddress
     * @return
     * @throws InterruptedException
     * @throws IOException 
     */
    private String createNobalance(String txEncode, String contranctAddress, String userPrivatekey, String withHoldPrivateKey) throws Exception {
        String createNoBalanceTx = client.createNoBalanceTx(txEncode, "");
	    // 解析交易
	    List<DecodeRawTransaction> decodeRawTransactions = client.decodeRawTransaction(createNoBalanceTx);
	    
	    String hexString = TransactionUtil.signDecodeTx(decodeRawTransactions, contranctAddress, userPrivatekey, withHoldPrivateKey);
	    
	    String submitTransaction = client.submitTransaction(hexString);
	    System.out.println("代扣hash= " + submitTransaction);
	    
	    String nextString = null;
        QueryTransactionResult txResult = new QueryTransactionResult();

		Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			QueryTransactionResult result = client.queryTransaction(submitTransaction);
			if(result == null) {
				Thread.sleep(3000);
				continue;
			}

			System.out.println("next:" + result.getTx().getNext());
			QueryTransactionResult nextResult = client.queryTransaction(result.getTx().getNext());
			System.out.println("ty:" + nextResult.getReceipt().getTyname());
			nextString = result.getTx().getNext();
			break;
		}
		
		
		txResult = client.queryTransaction(nextString);
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		return nextString;
    }
    
}
