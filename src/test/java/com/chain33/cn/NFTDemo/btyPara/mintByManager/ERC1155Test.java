package com.chain33.cn.NFTDemo.btyPara.mintByManager;

import java.io.IOException;
import java.util.List;

import org.junit.Test;
import com.alibaba.fastjson.JSONObject;
import cn.chain33.javasdk.client.Account;
import cn.chain33.javasdk.client.RpcClient;
import cn.chain33.javasdk.model.AccountInfo;
import cn.chain33.javasdk.model.decode.DecodeRawTransaction;
import cn.chain33.javasdk.model.rpcresult.QueryTransactionResult;
import cn.chain33.javasdk.utils.ByteUtil;
import cn.chain33.javasdk.utils.EvmUtil;
import cn.chain33.javasdk.utils.HexUtil;
import cn.chain33.javasdk.utils.TransactionUtil;

/**
 * NFT ERC1155 发行和转让
 *
 */
public class ERC1155Test {

	// 平行链所在服务器IP地址
	String ip = "172.22.17.194";
	// 平行链服务端口
	int port = 8901;
	RpcClient client = new RpcClient(ip, port);
	
    // 平行链名称，固定格式user.p.xxxx.样例中使用的名称叫mbaas， 根据自己平行链名称变化。  这个名称一定要和平行链配置文件中的名称完全一致。
	String paraName = "user.p.parad.";

	// 合约部署人（管理员）地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String managerAddress = "14nh6p7CUNtLXAHEiVkSd5mLUWynzafHBx";
	String managerPrivateKey = "7dfe80684f7007b2829a28c85be681304f7f4cf6081303dbace925826e2891d1";
//	String managerAddress = "替换成自己的地址，用下面createAccount方法生成";
//  String managerPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户手续费代扣地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String withholdAddress = "17RH6oiMbUjat3AAyQeifNiACPFefvz3Au";
    String withholdPrivateKey = "56d1272fcf806c3c5105f3536e39c8b33f88cb8971011dfe5886159201884763";
//	String withholdAddress = "替换成自己的地址，用下面createAccount方法生成";
//    String withholdPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户A地址和私钥
	String useraAddress;
    String useraPrivateKey;
    
    // 用户B地址和私钥
	String userbAddress;
    String userbPrivateKey;
    
    // solidity合约源码见：./solidity/ERC1155.sol
    // 合约编译出来的bytecode
    String codes = "60806040523480156200001157600080fd5b506040518060200160405280600081525062000033816200007b60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001ac565b80600290805190602001906200009392919062000097565b5050565b828054620000a59062000147565b90600052602060002090601f016020900481019282620000c9576000855562000115565b82601f10620000e457805160ff191683800117855562000115565b8280016001018555821562000115579182015b8281111562000114578251825591602001919060010190620000f7565b5b50905062000124919062000128565b5090565b5b808211156200014357600081600090555060010162000129565b5090565b600060028204905060018216806200016057607f821691505b602082108114156200017757620001766200017d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61302f80620001bc6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80634e1273f4116100715780634e1273f414610175578063a22cb465146101a5578063ab918735146101c1578063b2bdfa7b146101dd578063e985e9c5146101fb578063f242432a1461022b576100a8565b8062fdd58e146100ad57806301ffc9a7146100dd5780630e89341c1461010d5780631f04bcc71461013d5780632eb2c2d614610159575b600080fd5b6100c760048036038101906100c29190611e7b565b610247565b6040516100d4919061264e565b60405180910390f35b6100f760048036038101906100f29190611f86565b610310565b6040516101049190612451565b60405180910390f35b61012760048036038101906101229190611fe0565b6103f2565b604051610134919061246c565b60405180910390f35b61015760048036038101906101529190611d80565b610497565b005b610173600480360381019061016e9190611c1a565b610639565b005b61018f600480360381019061018a9190611f0e565b6106da565b60405161019c91906123f8565b60405180910390f35b6101bf60048036038101906101ba9190611e3b565b6107f3565b005b6101db60048036038101906101d69190611ebb565b610809565b005b6101e561082a565b6040516101f2919061231b565b60405180910390f35b61021560048036038101906102109190611bda565b610850565b6040516102229190612451565b60405180910390f35b61024560048036038101906102409190611ce9565b6108e4565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102af9061250e565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103db57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103eb57506103ea82610985565b5b9050919050565b60606004600083815260200190815260200160002080546104129061291a565b80601f016020809104026020016040519081016040528092919081815260200182805461043e9061291a565b801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e906125ae565b60405180910390fd5b815183511461056b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610562906124ce565b60405180910390fd5b80518351146105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a69061258e565b60405180910390fd5b6105ca848484604051806020016040528060008152506109ef565b6001815111156106335760005b83518110156106315761061e8482815181106105f6576105f5612a24565b5b602002602001015183838151811061061157610610612a24565b5b6020026020010151610c1c565b80806106299061297d565b9150506105d7565b505b50505050565b610641610c48565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610687575061068685610681610c48565b610850565b5b6106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd9061254e565b60405180910390fd5b6106d38585858585610c50565b5050505050565b60608151835114610720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610717906125ee565b60405180910390fd5b6000835167ffffffffffffffff81111561073d5761073c612a53565b5b60405190808252806020026020018201604052801561076b5781602001602082028036833780820191505090505b50905060005b84518110156107e8576107b88582815181106107905761078f612a24565b5b60200260200101518583815181106107ab576107aa612a24565b5b6020026020010151610247565b8282815181106107cb576107ca612a24565b5b602002602001018181525050806107e19061297d565b9050610771565b508091505092915050565b6108056107fe610c48565b8383610f72565b5050565b61082533848484604051806020016040528060008152506108e4565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6108ec610c48565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061093257506109318561092c610c48565b610850565b5b610971576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610968906124ee565b60405180910390fd5b61097e85858585856110df565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a569061262e565b60405180910390fd5b8151835114610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a9061260e565b60405180910390fd5b6000610aad610c48565b9050610abe8160008787878761137b565b60005b8451811015610b7757838181518110610add57610adc612a24565b5b6020026020010151600080878481518110610afb57610afa612a24565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b5d919061280e565b925050819055508080610b6f9061297d565b915050610ac1565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610bef92919061241a565b60405180910390a4610c0681600087878787611383565b610c158160008787878761138b565b5050505050565b80600460008481526020019081526020016000209080519060200190610c439291906117f6565b505050565b600033905090565b8151835114610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b9061260e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfb9061252e565b60405180910390fd5b6000610d0e610c48565b9050610d1e81878787878761137b565b60005b8451811015610ecf576000858281518110610d3f57610d3e612a24565b5b602002602001015190506000858381518110610d5e57610d5d612a24565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df69061256e565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610eb4919061280e565b9250508190555050505080610ec89061297d565b9050610d21565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f4692919061241a565b60405180910390a4610f5c818787878787611383565b610f6a81878787878761138b565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd8906125ce565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110d29190612451565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561114f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111469061252e565b60405180910390fd5b6000611159610c48565b9050600061116685611572565b9050600061117385611572565b905061118383898985858961137b565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561121a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112119061256e565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112cf919061280e565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161134c929190612669565b60405180910390a4611362848a8a86868a611383565b611370848a8a8a8a8a6115ec565b505050505050505050565b505050505050565b505050505050565b6113aa8473ffffffffffffffffffffffffffffffffffffffff166117d3565b1561156a578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016113f0959493929190612336565b602060405180830381600087803b15801561140a57600080fd5b505af192505050801561143b57506040513d601f19601f820116820180604052508101906114389190611fb3565b60015b6114e157611447612a82565b806308c379a014156114a4575061145c612f07565b8061146757506114a6565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b919061246c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d89061248e565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f906124ae565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff81111561159157611590612a53565b5b6040519080825280602002602001820160405280156115bf5781602001602082028036833780820191505090505b50905082816000815181106115d7576115d6612a24565b5b60200260200101818152505080915050919050565b61160b8473ffffffffffffffffffffffffffffffffffffffff166117d3565b156117cb578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161165195949392919061239e565b602060405180830381600087803b15801561166b57600080fd5b505af192505050801561169c57506040513d601f19601f820116820180604052508101906116999190611fb3565b60015b611742576116a8612a82565b806308c379a0141561170557506116bd612f07565b806116c85750611707565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fc919061246c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117399061248e565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c0906124ae565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546118029061291a565b90600052602060002090601f016020900481019282611824576000855561186b565b82601f1061183d57805160ff191683800117855561186b565b8280016001018555821561186b579182015b8281111561186a57825182559160200191906001019061184f565b5b509050611878919061187c565b5090565b5b8082111561189557600081600090555060010161187d565b5090565b60006118ac6118a7846126b7565b612692565b905080838252602082019050828560208602820111156118cf576118ce612aa9565b5b60005b858110156118ff57816118e58882611a8b565b8452602084019350602083019250506001810190506118d2565b5050509392505050565b600061191c611917846126e3565b612692565b9050808382526020820190508285602086028201111561193f5761193e612aa9565b5b60005b8581101561198d57813567ffffffffffffffff81111561196557611964612aa4565b5b8086016119728982611b97565b85526020850194506020840193505050600181019050611942565b5050509392505050565b60006119aa6119a58461270f565b612692565b905080838252602082019050828560208602820111156119cd576119cc612aa9565b5b60005b858110156119fd57816119e38882611bc5565b8452602084019350602083019250506001810190506119d0565b5050509392505050565b6000611a1a611a158461273b565b612692565b905082815260208101848484011115611a3657611a35612aae565b5b611a418482856128d8565b509392505050565b6000611a5c611a578461276c565b612692565b905082815260208101848484011115611a7857611a77612aae565b5b611a838482856128d8565b509392505050565b600081359050611a9a81612f9d565b92915050565b600082601f830112611ab557611ab4612aa4565b5b8135611ac5848260208601611899565b91505092915050565b600082601f830112611ae357611ae2612aa4565b5b8135611af3848260208601611909565b91505092915050565b600082601f830112611b1157611b10612aa4565b5b8135611b21848260208601611997565b91505092915050565b600081359050611b3981612fb4565b92915050565b600081359050611b4e81612fcb565b92915050565b600081519050611b6381612fcb565b92915050565b600082601f830112611b7e57611b7d612aa4565b5b8135611b8e848260208601611a07565b91505092915050565b600082601f830112611bac57611bab612aa4565b5b8135611bbc848260208601611a49565b91505092915050565b600081359050611bd481612fe2565b92915050565b60008060408385031215611bf157611bf0612ab8565b5b6000611bff85828601611a8b565b9250506020611c1085828601611a8b565b9150509250929050565b600080600080600060a08688031215611c3657611c35612ab8565b5b6000611c4488828901611a8b565b9550506020611c5588828901611a8b565b945050604086013567ffffffffffffffff811115611c7657611c75612ab3565b5b611c8288828901611afc565b935050606086013567ffffffffffffffff811115611ca357611ca2612ab3565b5b611caf88828901611afc565b925050608086013567ffffffffffffffff811115611cd057611ccf612ab3565b5b611cdc88828901611b69565b9150509295509295909350565b600080600080600060a08688031215611d0557611d04612ab8565b5b6000611d1388828901611a8b565b9550506020611d2488828901611a8b565b9450506040611d3588828901611bc5565b9350506060611d4688828901611bc5565b925050608086013567ffffffffffffffff811115611d6757611d66612ab3565b5b611d7388828901611b69565b9150509295509295909350565b60008060008060808587031215611d9a57611d99612ab8565b5b6000611da887828801611a8b565b945050602085013567ffffffffffffffff811115611dc957611dc8612ab3565b5b611dd587828801611afc565b935050604085013567ffffffffffffffff811115611df657611df5612ab3565b5b611e0287828801611afc565b925050606085013567ffffffffffffffff811115611e2357611e22612ab3565b5b611e2f87828801611ace565b91505092959194509250565b60008060408385031215611e5257611e51612ab8565b5b6000611e6085828601611a8b565b9250506020611e7185828601611b2a565b9150509250929050565b60008060408385031215611e9257611e91612ab8565b5b6000611ea085828601611a8b565b9250506020611eb185828601611bc5565b9150509250929050565b600080600060608486031215611ed457611ed3612ab8565b5b6000611ee286828701611a8b565b9350506020611ef386828701611bc5565b9250506040611f0486828701611bc5565b9150509250925092565b60008060408385031215611f2557611f24612ab8565b5b600083013567ffffffffffffffff811115611f4357611f42612ab3565b5b611f4f85828601611aa0565b925050602083013567ffffffffffffffff811115611f7057611f6f612ab3565b5b611f7c85828601611afc565b9150509250929050565b600060208284031215611f9c57611f9b612ab8565b5b6000611faa84828501611b3f565b91505092915050565b600060208284031215611fc957611fc8612ab8565b5b6000611fd784828501611b54565b91505092915050565b600060208284031215611ff657611ff5612ab8565b5b600061200484828501611bc5565b91505092915050565b600061201983836122fd565b60208301905092915050565b61202e81612864565b82525050565b600061203f826127ad565b61204981856127db565b93506120548361279d565b8060005b8381101561208557815161206c888261200d565b9750612077836127ce565b925050600181019050612058565b5085935050505092915050565b61209b81612876565b82525050565b60006120ac826127b8565b6120b681856127ec565b93506120c68185602086016128e7565b6120cf81612abd565b840191505092915050565b60006120e5826127c3565b6120ef81856127fd565b93506120ff8185602086016128e7565b61210881612abd565b840191505092915050565b60006121206034836127fd565b915061212b82612adb565b604082019050919050565b60006121436028836127fd565b915061214e82612b2a565b604082019050919050565b60006121666021836127fd565b915061217182612b79565b604082019050919050565b60006121896029836127fd565b915061219482612bc8565b604082019050919050565b60006121ac602a836127fd565b91506121b782612c17565b604082019050919050565b60006121cf6025836127fd565b91506121da82612c66565b604082019050919050565b60006121f26032836127fd565b91506121fd82612cb5565b604082019050919050565b6000612215602a836127fd565b915061222082612d04565b604082019050919050565b6000612238601e836127fd565b915061224382612d53565b602082019050919050565b600061225b6023836127fd565b915061226682612d7c565b604082019050919050565b600061227e6029836127fd565b915061228982612dcb565b604082019050919050565b60006122a16029836127fd565b91506122ac82612e1a565b604082019050919050565b60006122c46028836127fd565b91506122cf82612e69565b604082019050919050565b60006122e76021836127fd565b91506122f282612eb8565b604082019050919050565b612306816128ce565b82525050565b612315816128ce565b82525050565b60006020820190506123306000830184612025565b92915050565b600060a08201905061234b6000830188612025565b6123586020830187612025565b818103604083015261236a8186612034565b9050818103606083015261237e8185612034565b9050818103608083015261239281846120a1565b90509695505050505050565b600060a0820190506123b36000830188612025565b6123c06020830187612025565b6123cd604083018661230c565b6123da606083018561230c565b81810360808301526123ec81846120a1565b90509695505050505050565b600060208201905081810360008301526124128184612034565b905092915050565b600060408201905081810360008301526124348185612034565b905081810360208301526124488184612034565b90509392505050565b60006020820190506124666000830184612092565b92915050565b6000602082019050818103600083015261248681846120da565b905092915050565b600060208201905081810360008301526124a781612113565b9050919050565b600060208201905081810360008301526124c781612136565b9050919050565b600060208201905081810360008301526124e781612159565b9050919050565b600060208201905081810360008301526125078161217c565b9050919050565b600060208201905081810360008301526125278161219f565b9050919050565b60006020820190508181036000830152612547816121c2565b9050919050565b60006020820190508181036000830152612567816121e5565b9050919050565b6000602082019050818103600083015261258781612208565b9050919050565b600060208201905081810360008301526125a78161222b565b9050919050565b600060208201905081810360008301526125c78161224e565b9050919050565b600060208201905081810360008301526125e781612271565b9050919050565b6000602082019050818103600083015261260781612294565b9050919050565b60006020820190508181036000830152612627816122b7565b9050919050565b60006020820190508181036000830152612647816122da565b9050919050565b6000602082019050612663600083018461230c565b92915050565b600060408201905061267e600083018561230c565b61268b602083018461230c565b9392505050565b600061269c6126ad565b90506126a8828261294c565b919050565b6000604051905090565b600067ffffffffffffffff8211156126d2576126d1612a53565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156126fe576126fd612a53565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561272a57612729612a53565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561275657612755612a53565b5b61275f82612abd565b9050602081019050919050565b600067ffffffffffffffff82111561278757612786612a53565b5b61279082612abd565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612819826128ce565b9150612824836128ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612859576128586129c6565b5b828201905092915050565b600061286f826128ae565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156129055780820151818401526020810190506128ea565b83811115612914576000848401525b50505050565b6000600282049050600182168061293257607f821691505b60208210811415612946576129456129f5565b5b50919050565b61295582612abd565b810181811067ffffffffffffffff8211171561297457612973612a53565b5b80604052505050565b6000612988826128ce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129bb576129ba6129c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d1115612aa15760046000803e612a9e600051612ace565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f5468652069647320616e6420616d6f756e747320617265206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f5468652069647320616e64207572697320617265206e6f74206d617463680000600082015250565b7f6f6e6c7920617574686f72697a6564206f776e65722063616e206d696e74204e60008201527f46542e0000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d1015612f1757612f9a565b612f1f6126ad565b60043d036004823e80513d602482011167ffffffffffffffff82111715612f47575050612f9a565b808201805167ffffffffffffffff811115612f655750505050612f9a565b80602083010160043d038501811115612f82575050505050612f9a565b612f918260200185018661294c565b82955050505050505b90565b612fa681612864565b8114612fb157600080fd5b50565b612fbd81612876565b8114612fc857600080fd5b50565b612fd481612882565b8114612fdf57600080fd5b50565b612feb816128ce565b8114612ff657600080fd5b5056fea264697066735822122011048a2479b30e744473f4673671e1885042698adbfe3e9b130606d127d1d6fe64736f6c63430008070033";
    // 合约对应的abi
    String abi = "[{\"inputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"constructor\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"ApprovalForAll\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"values\",\"type\": \"uint256[]\"}],\"name\": \"TransferBatch\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"value\",\"type\": \"uint256\"}],\"name\": \"TransferSingle\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": false,\"internalType\": \"string\",\"name\": \"value\",\"type\": \"string\"},{\"indexed\": true,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"URI\",\"type\": \"event\"},{\"inputs\": [],\"name\": \"_owner\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"balanceOf\",\"outputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address[]\",\"name\": \"accounts\",\"type\": \"address[]\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"}],\"name\": \"balanceOfBatch\",\"outputs\": [{\"internalType\": \"uint256[]\",\"name\": \"\",\"type\": \"uint256[]\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"}],\"name\": \"isApprovedForAll\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"_to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"string[]\",\"name\": \"uris\",\"type\": \"string[]\"}],\"name\": \"mint\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeBatchTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"setApprovalForAll\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"bytes4\",\"name\": \"interfaceId\",\"type\": \"bytes4\"}],\"name\": \"supportsInterface\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"}],\"name\": \"transferArtNFT\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"uint256\",\"name\": \"_id\",\"type\": \"uint256\"}],\"name\": \"uri\",\"outputs\": [{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\"stateMutability\": \"view\",\"type\": \"function\"}]";

    /**
     * ERC1155合约部署，调用测试
     * @throws Exception 
     */
    @Test
    public void testERC1155() throws Exception {
    	
    	
    	// =======> step1： 为用户A和B生成私钥和地址
    	AccountInfo infoA = createAccount();
    	useraAddress = infoA.getAddress();
    	useraPrivateKey = infoA.getPrivateKey();
    	
    	AccountInfo infoB = createAccount();
    	userbAddress = infoB.getAddress();
    	userbPrivateKey = infoB.getPrivateKey();
    	
    	// =======>  step2: 通过管理员部署合约，部署好之后，合约就运行区块链内存中，后续可以直接调用，不用每次都调用部署合约这一步操作（除非业务上有需要）
        // 部署合约, 参数： 平行链合约名， 签名地址，签名私钥
        String hash = deployContract(paraName, managerAddress, managerPrivateKey);
        
        // 计算上一步部署到链上的合约地址
        String contractAddress = TransactionUtil.convertExectoAddr(managerAddress + hash.substring(2));
        System.out.println("部署好的合约地址 = " + contractAddress);
        
        // =======>  step3: 调用合约发行NFT,假设为2件游戏道具各生成100个NFT资产, id从10000开始
        
        // 调用合约的手续费，可以固定设置一个较大的值，保证交易能成功，此处设置0.01个BTY
        long fee = 1000000;
        
        int lenght = 2;
        // tokenId数组
        int[] ids = new int[lenght];
        // 同一个tokenid发行多少份
        int[] amounts = new int[lenght];
        // 每一个tokenid对应的URI信息（一般对应存放图片的描述信息，图片内容的一个url）
        String[] uris = new String[lenght];
        for (int i = 0; i < lenght; i++) {
        	ids[i] = 10000 + i;
        	amounts[i] = 100;
        	// 例子为了简化处理，让所有ID都固定一个地址，
        	uris[i] = "http://www.baidu.com";
        }
        // 构造合约调用, mint对应solidity合约里的方法名， useraAddress, ids, amounts这三项对应合约里的参数。  将NFT发行在用户A地址下
        byte[] initNFT = EvmUtil.encodeParameter(abi, "mint", useraAddress, ids, amounts, uris);

        hash = callContract(initNFT, contractAddress, managerAddress, managerPrivateKey, paraName, fee);
        
        // =======>  查询用户A地址下的余额
        byte[] packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[0] + "余额");
        
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[1]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[1] + "余额");
        
        // =======>  从A地址向B地址转账,使用代扣交易
        // 代扣交易需要对平行链合约地址做一个处理
        String execer = paraName + "evm";
        // 平行链合约地址计算(平行链title前缀+合约名称)
        String paracontractAddress = client.convertExectoAddr(execer);
        // 用户A将第1个NFT中的50个转给用户B
    	byte[] transfer = EvmUtil.encodeParameter(abi, "transferArtNFT", userbAddress, ids[0], 50);
    	// 构造转账交易体，先用用户A对此笔交易签名，
    	String txEncode = EvmUtil.callEvmContractWithhold(transfer,"", 0, execer, useraPrivateKey, contractAddress);
    	// 再调用代扣交易方法，用代扣私钥对交易组做签名
    	createNobalance(txEncode, paracontractAddress, useraPrivateKey, withholdPrivateKey);

        
        // =======>  查询用户A地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户A,NFTID=" + ids[0] + "余额");
        
        // =======>  查询用户B地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", userbAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户B,NFTID=" + ids[0] + "余额");
        
        // =======>  查询指定tokenid的uri信息
        packAbiGet = EvmUtil.encodeParameter(abi, "uri", ids[0]);
        queryContractString(packAbiGet, contractAddress, "NFTID=" + ids[0] + "的URI信息");
        
    }
    
    /**
     * Step1: 生成私钥，地址
     * 一般在用户注册时调用，生成后在数据库中和用户信息绑定，后续直接从库中查出来使用
     */
    private AccountInfo createAccount() {
    	Account account = new Account();
		AccountInfo accountInfo = account.newAccountLocal();
		return accountInfo;
    }
    
    /**
     * Step2:部署合约
     * @throws Exception
     */
    private String deployContract(String execer, String address, String privateKey) throws Exception {

        // 部署合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
        
        byte[] code = ByteUtil.merge(HexUtil.fromHexString(codes), abi.getBytes());
        
    	// TODO: 估算部署合约GAS费， 实际应用过程中，不建议在业务代码中直接调用gas费， 只是做预估使用。  实际可以在代码里设置一个大于这个值的数（合约部署手续费一般都高于合约调用，所以这边单独估算）
        String evmCode = EvmUtil.getCreateEvmEncode(code, "", "deploy ERC1155 contract", execer);
        long gas = client.queryEVMGas("evm", evmCode, address);
        System.out.println("Gas fee is:" + gas);
        
        // 通过合约code, 管理员私钥，平行链名称+evm,手续费等参数构造部署合约交易，并签名
        txEncode = EvmUtil.createEvmContract(code, "", "evm-sdk-test", privateKey, execer, gas);
        // 将构造并签好名的交易通过rpc接口发送到平行链上
        txhash = client.submitTransaction(txEncode);
        System.out.println("部署合约交易hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约部署成功");

		} else {
			System.out.println("合约部署失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    }
    
    /**
     * Step3: 调用合约
     * @param contractAddr
     * @param address
     * @param privateKey
     * @throws IOException 
     * @throws InterruptedException 
     */
    private String callContract(byte[] code, String contractAddr, String address, String privateKey, String execer, long gas) throws Exception {
    	
        // 调用合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
    	
    	txEncode = EvmUtil.callEvmContract(code,"", 0, contractAddr, privateKey, execer, gas);
        txhash = client.submitTransaction(txEncode);
        System.out.println("调用合约hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    	
    }
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContract(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToAlgorism(HexUtil.removeHexHeader(rawData)));
    }
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContractString(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToString(HexUtil.removeHexHeader(rawData)).replaceAll("\u0000",""));
    }
          
    
    /**
     * 构建代扣手续费交易
     * 
     * @param txEncode
     * @param contranctAddress
     * @return
     * @throws InterruptedException
     * @throws IOException 
     */
    private String createNobalance(String txEncode, String contranctAddress, String userPrivatekey, String withHoldPrivateKey) throws Exception {
        String createNoBalanceTx = client.createNoBalanceTx(txEncode, "");
	    // 解析交易
	    List<DecodeRawTransaction> decodeRawTransactions = client.decodeRawTransaction(createNoBalanceTx);
	    
	    String hexString = TransactionUtil.signDecodeTx(decodeRawTransactions, contranctAddress, userPrivatekey, withHoldPrivateKey);
	    String submitTransaction = client.submitTransaction(hexString);
	    System.out.println("代扣hash= " + submitTransaction);
	    
	    String nextString = null;
        QueryTransactionResult txResult = new QueryTransactionResult();

		Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			QueryTransactionResult result = client.queryTransaction(submitTransaction);
			if(result == null) {
				Thread.sleep(3000);
				continue;
			}

			System.out.println("next:" + result.getTx().getNext());
			QueryTransactionResult nextResult = client.queryTransaction(result.getTx().getNext());
			System.out.println("ty:" + nextResult.getReceipt().getTyname());
			nextString = result.getTx().getNext();
			break;
		}
		
		
		txResult = client.queryTransaction(nextString);
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		return nextString;
    }
    
}
