package com.chain33.cn.NFTDemo.btyPara.mintByManager;

import java.io.IOException;
import java.util.List;

import org.junit.Test;
import com.alibaba.fastjson.JSONObject;
import cn.chain33.javasdk.client.Account;
import cn.chain33.javasdk.client.RpcClient;
import cn.chain33.javasdk.model.AccountInfo;
import cn.chain33.javasdk.model.decode.DecodeRawTransaction;
import cn.chain33.javasdk.model.rpcresult.QueryTransactionResult;
import cn.chain33.javasdk.utils.ByteUtil;
import cn.chain33.javasdk.utils.EvmUtil;
import cn.chain33.javasdk.utils.HexUtil;
import cn.chain33.javasdk.utils.TransactionUtil;

/**
 * NFT ERC1155 发行和转让
 *
 */
public class ERC1155Test {

	// 平行链所在服务器IP地址
	String ip = "localhost";
	// 平行链服务端口
	int port = 8901;
	RpcClient client = new RpcClient(ip, port);
	
    // 平行链名称，固定格式user.p.xxxx.样例中使用的名称叫mbaas， 根据自己平行链名称变化。  这个名称一定要和平行链配置文件中的名称完全一致。
	String paraName = "user.p.mbaas.";

	// 合约部署人（管理员）地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String managerAddress = "14nh6p7CUNtLXAHEiVkSd5mLUWynzafHBx";
	String managerPrivateKey = "7dfe80684f7007b2829a28c85be681304f7f4cf6081303dbace925826e2891d1";
//	String managerAddress = "替换成自己的地址，用下面createAccount方法生成";
//  String managerPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户手续费代扣地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String withholdAddress = "17RH6oiMbUjat3AAyQeifNiACPFefvz3Au";
    String withholdPrivateKey = "56d1272fcf806c3c5105f3536e39c8b33f88cb8971011dfe5886159201884763";
//	String withholdAddress = "替换成自己的地址，用下面createAccount方法生成";
//    String withholdPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户A地址和私钥
	String useraAddress;
    String useraPrivateKey;
    
    // 用户B地址和私钥
	String userbAddress;
    String userbPrivateKey;
    
    // solidity合约源码见：./solidity/ERC1155.sol
    // 合约编译出来的bytecode
    String codes = "";
    // 合约对应的abi
    String abi = "[{\"inputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"constructor\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"ApprovalForAll\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"values\",\"type\": \"uint256[]\"}],\"name\": \"TransferBatch\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"value\",\"type\": \"uint256\"}],\"name\": \"TransferSingle\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": false,\"internalType\": \"string\",\"name\": \"value\",\"type\": \"string\"},{\"indexed\": true,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"URI\",\"type\": \"event\"},{\"inputs\": [],\"name\": \"_owner\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"balanceOf\",\"outputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address[]\",\"name\": \"accounts\",\"type\": \"address[]\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"}],\"name\": \"balanceOfBatch\",\"outputs\": [{\"internalType\": \"uint256[]\",\"name\": \"\",\"type\": \"uint256[]\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"}],\"name\": \"isApprovedForAll\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"_to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"}],\"name\": \"mint\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeBatchTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"setApprovalForAll\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"bytes4\",\"name\": \"interfaceId\",\"type\": \"bytes4\"}],\"name\": \"supportsInterface\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"}],\"name\": \"transferArtNFT\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"name\": \"uri\",\"outputs\": [{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\"stateMutability\": \"view\",\"type\": \"function\"}]";

    /**
     * ERC1155合约部署，调用测试
     * @throws Exception 
     */
    @Test
    public void testERC1155() throws Exception {
    	
    	
    	// =======> step1： 为用户A和B生成私钥和地址
    	AccountInfo infoA = createAccount();
    	useraAddress = infoA.getAddress();
    	useraPrivateKey = infoA.getPrivateKey();
    	
    	AccountInfo infoB = createAccount();
    	userbAddress = infoB.getAddress();
    	userbPrivateKey = infoB.getPrivateKey();
    	
    	// =======>  step2: 通过管理员部署合约，部署好之后，合约就运行区块链内存中，后续可以直接调用，不用每次都调用部署合约这一步操作（除非业务上有需要）
        // 部署合约, 参数： 平行链合约名， 签名地址，签名私钥
        String hash = deployContract(paraName, managerAddress, managerPrivateKey);
        
        // 计算上一步部署到链上的合约地址
        String contractAddress = TransactionUtil.convertExectoAddr(managerAddress + hash.substring(2));
        System.out.println("部署好的合约地址 = " + contractAddress);
        
        // =======>  step3: 调用合约发行NFT,假设为2件游戏道具各生成100个NFT资产, id从10000开始
        
        // 调用合约的手续费，可以固定设置一个较大的值，保证交易能成功，此处设置0.01个BTY
        long fee = 1000000;
        
        int lenght = 2;
        int[] ids = new int[lenght];
        int[] amounts = new int[lenght];
        for (int i = 0; i < lenght; i++) {
        	ids[i] = 10000 + i;
        	amounts[i] = 100;
        }
        // 构造合约调用, mint对应solidity合约里的方法名， useraAddress, ids, amounts这三项对应合约里的参数。  将NFT发行在用户A地址下
        byte[] initNFT = EvmUtil.encodeParameter(abi, "mint", useraAddress, ids, amounts);

        hash = callContract(initNFT, contractAddress, managerAddress, managerPrivateKey, paraName, fee);
        
        // =======>  查询用户A地址下的余额
        byte[] packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[0] + "余额");
        
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[1]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[1] + "余额");
        
        // =======>  从A地址向B地址转账,使用代扣交易
        // 代扣交易需要对平行链合约地址做一个处理
        String execer = paraName + "evm";
        // 平行链合约地址计算(平行链title前缀+合约名称)
        String paracontractAddress = client.convertExectoAddr(execer);
        // 用户A将第1个NFT中的50个转给用户B
    	byte[] transfer = EvmUtil.encodeParameter(abi, "transferArtNFT", userbAddress, ids[0], 50);
    	// 构造转账交易体，先用用户A对此笔交易签名，
    	String txEncode = EvmUtil.callEvmContractWithhold(transfer,"", 0, execer, useraPrivateKey, contractAddress);
    	// 再调用代扣交易方法，用代扣私钥对交易组做签名
    	createNobalance(txEncode, paracontractAddress, useraPrivateKey, withholdPrivateKey);

        
        // =======>  查询用户A地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户A,NFTID=" + ids[0] + "余额");
        
        // =======>  查询用户B地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", userbAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户B,NFTID=" + ids[0] + "余额");
        
    }
    
    /**
     * Step1: 生成私钥，地址
     * 一般在用户注册时调用，生成后在数据库中和用户信息绑定，后续直接从库中查出来使用
     */
    private AccountInfo createAccount() {
    	Account account = new Account();
		AccountInfo accountInfo = account.newAccountLocal();
		return accountInfo;
    }
    
    /**
     * Step2:部署合约
     * @throws Exception
     */
    private String deployContract(String execer, String address, String privateKey) throws Exception {

        // 部署合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
        
        byte[] code = ByteUtil.merge(HexUtil.fromHexString(codes), abi.getBytes());
        
    	// TODO: 估算部署合约GAS费， 实际应用过程中，不建议在业务代码中直接调用gas费， 只是做预估使用。  实际可以在代码里设置一个大于这个值的数（合约部署手续费一般都高于合约调用，所以这边单独估算）
        String evmCode = EvmUtil.getCreateEvmEncode(code, "", "deploy ERC1155 contract", execer);
        long gas = client.queryEVMGas("evm", evmCode, address);
        System.out.println("Gas fee is:" + gas);
        
        // 通过合约code, 管理员私钥，平行链名称+evm,手续费等参数构造部署合约交易，并签名
        txEncode = EvmUtil.createEvmContract(code, "", "evm-sdk-test", privateKey, execer, gas);
        // 将构造并签好名的交易通过rpc接口发送到平行链上
        txhash = client.submitTransaction(txEncode);
        System.out.println("部署合约交易hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约部署成功");

		} else {
			System.out.println("合约部署失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    }
    
    /**
     * Step3: 调用合约
     * @param contractAddr
     * @param address
     * @param privateKey
     * @throws IOException 
     * @throws InterruptedException 
     */
    private String callContract(byte[] code, String contractAddr, String address, String privateKey, String execer, long gas) throws Exception {
    	
        // 调用合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
    	
    	txEncode = EvmUtil.callEvmContract(code,"", 0, contractAddr, privateKey, execer, gas);
        txhash = client.submitTransaction(txEncode);
        System.out.println("调用合约hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    	
    }
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContract(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToAlgorism(HexUtil.removeHexHeader(rawData)));
    }
       
    
    /**
     * 构建代扣手续费交易
     * 
     * @param txEncode
     * @param contranctAddress
     * @return
     * @throws InterruptedException
     * @throws IOException 
     */
    private String createNobalance(String txEncode, String contranctAddress, String userPrivatekey, String withHoldPrivateKey) throws Exception {
        String createNoBalanceTx = client.createNoBalanceTx(txEncode, "");
	    // 解析交易
	    List<DecodeRawTransaction> decodeRawTransactions = client.decodeRawTransaction(createNoBalanceTx);
	    
	    String hexString = TransactionUtil.signDecodeTx(decodeRawTransactions, contranctAddress, userPrivatekey, withHoldPrivateKey);
	    String submitTransaction = client.submitTransaction(hexString);
	    System.out.println("代扣hash= " + submitTransaction);
	    
	    String nextString = null;
        QueryTransactionResult txResult = new QueryTransactionResult();

		Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			QueryTransactionResult result = client.queryTransaction(submitTransaction);
			if(result == null) {
				Thread.sleep(3000);
				continue;
			}

			System.out.println("next:" + result.getTx().getNext());
			QueryTransactionResult nextResult = client.queryTransaction(result.getTx().getNext());
			System.out.println("ty:" + nextResult.getReceipt().getTyname());
			nextString = result.getTx().getNext();
			break;
		}
		
		
		txResult = client.queryTransaction(nextString);
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		return nextString;
    }
    
}
