package com.chain33.cn.NFTDemo.btyPara.mintByUser;

import java.io.IOException;
import java.util.List;

import org.junit.Test;
import com.alibaba.fastjson.JSONObject;
import cn.chain33.javasdk.client.Account;
import cn.chain33.javasdk.client.RpcClient;
import cn.chain33.javasdk.model.AccountInfo;
import cn.chain33.javasdk.model.decode.DecodeRawTransaction;
import cn.chain33.javasdk.model.rpcresult.QueryTransactionResult;
import cn.chain33.javasdk.utils.ByteUtil;
import cn.chain33.javasdk.utils.EvmUtil;
import cn.chain33.javasdk.utils.HexUtil;
import cn.chain33.javasdk.utils.TransactionUtil;

/**
 * NFT ERC1155 发行和转让
 *
 */
public class ERC1155Test {

	// 平行链所在服务器IP地址
	String ip = "172.22.17.194";
	// 平行链服务端口
	int port = 8901;
	RpcClient client = new RpcClient(ip, port);
	
    // 平行链名称，固定格式user.p.xxxx.样例中使用的名称叫mbaas， 根据自己平行链名称变化。  这个名称一定要和平行链配置文件中的名称完全一致。
	String paraName = "user.p.parad.";

	// 合约部署人（管理员）地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String managerAddress = "14nh6p7CUNtLXAHEiVkSd5mLUWynzafHBx";
	String managerPrivateKey = "7dfe80684f7007b2829a28c85be681304f7f4cf6081303dbace925826e2891d1";
//	String managerAddress = "替换成自己的地址，用下面createAccount方法生成";
//	String managerPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户手续费代扣地址和私钥,地址下需要有BTY来缴纳手续费
	// 生成方式参考下面testCreateAccount方法，私钥和地址一一对应
	String withholdAddress = "17RH6oiMbUjat3AAyQeifNiACPFefvz3Au";
    String withholdPrivateKey = "56d1272fcf806c3c5105f3536e39c8b33f88cb8971011dfe5886159201884763";
//	String withholdAddress = "替换成自己的地址，用下面createAccount方法生成";
//    String withholdPrivateKey = "替换成自己的私钥，用下面createAccount方法生成,注意私钥千万不能泄漏";
    
    // 用户A地址和私钥
	String useraAddress;
    String useraPrivateKey;
    
    // 用户B地址和私钥
	String userbAddress;
    String userbPrivateKey;
    
    // solidity合约源码见：./solidity/ERC1155.sol
    // 合约编译出来的bytecode
    String codes = "60806040523480156200001157600080fd5b506040518060200160405280600081525062000033816200007b60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001ac565b80600290805190602001906200009392919062000097565b5050565b828054620000a59062000147565b90600052602060002090601f016020900481019282620000c9576000855562000115565b82601f10620000e457805160ff191683800117855562000115565b8280016001018555821562000115579182015b8281111562000114578251825591602001919060010190620000f7565b5b50905062000124919062000128565b5090565b5b808211156200014357600081600090555060010162000129565b5090565b600060028204905060018216806200016057607f821691505b602082108114156200017757620001766200017d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b612f0d80620001bc6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80634e1273f4116100715780634e1273f414610175578063a22cb465146101a5578063ab918735146101c1578063b2bdfa7b146101dd578063e985e9c5146101fb578063f242432a1461022b576100a8565b8062fdd58e146100ad57806301ffc9a7146100dd5780630e89341c1461010d5780631f04bcc71461013d5780632eb2c2d614610159575b600080fd5b6100c760048036038101906100c29190611deb565b610247565b6040516100d4919061257b565b60405180910390f35b6100f760048036038101906100f29190611ef6565b610310565b604051610104919061239e565b60405180910390f35b61012760048036038101906101229190611f50565b6103f2565b60405161013491906123b9565b60405180910390f35b61015760048036038101906101529190611cf0565b610497565b005b610173600480360381019061016e9190611b8a565b6105a9565b005b61018f600480360381019061018a9190611e7e565b61064a565b60405161019c9190612345565b60405180910390f35b6101bf60048036038101906101ba9190611dab565b610763565b005b6101db60048036038101906101d69190611e2b565b610779565b005b6101e561079a565b6040516101f29190612268565b60405180910390f35b61021560048036038101906102109190611b4a565b6107c0565b604051610222919061239e565b60405180910390f35b61024560048036038101906102409190611c59565b610854565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102af9061245b565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103db57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103eb57506103ea826108f5565b5b9050919050565b606060046000838152602001908152602001600020805461041290612847565b80601f016020809104026020016040519081016040528092919081815260200182805461043e90612847565b801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b50505050509050919050565b81518351146104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d29061241b565b60405180910390fd5b805183511461051f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610516906124db565b60405180910390fd5b61053a8484846040518060200160405280600081525061095f565b6001815111156105a35760005b83518110156105a15761058e84828151811061056657610565612951565b5b602002602001015183838151811061058157610580612951565b5b6020026020010151610b8c565b8080610599906128aa565b915050610547565b505b50505050565b6105b1610bb8565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806105f757506105f6856105f1610bb8565b6107c0565b5b610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d9061249b565b60405180910390fd5b6106438585858585610bc0565b5050505050565b60608151835114610690576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106879061251b565b60405180910390fd5b6000835167ffffffffffffffff8111156106ad576106ac612980565b5b6040519080825280602002602001820160405280156106db5781602001602082028036833780820191505090505b50905060005b845181101561075857610728858281518110610700576106ff612951565b5b602002602001015185838151811061071b5761071a612951565b5b6020026020010151610247565b82828151811061073b5761073a612951565b5b60200260200101818152505080610751906128aa565b90506106e1565b508091505092915050565b61077561076e610bb8565b8383610ee2565b5050565b6107953384848460405180602001604052806000815250610854565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61085c610bb8565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806108a257506108a18561089c610bb8565b6107c0565b5b6108e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d89061243b565b60405180910390fd5b6108ee858585858561104f565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c69061255b565b60405180910390fd5b8151835114610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a9061253b565b60405180910390fd5b6000610a1d610bb8565b9050610a2e816000878787876112eb565b60005b8451811015610ae757838181518110610a4d57610a4c612951565b5b6020026020010151600080878481518110610a6b57610a6a612951565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610acd919061273b565b925050819055508080610adf906128aa565b915050610a31565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610b5f929190612367565b60405180910390a4610b76816000878787876112f3565b610b85816000878787876112fb565b5050505050565b80600460008481526020019081526020016000209080519060200190610bb3929190611766565b505050565b600033905090565b8151835114610c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfb9061253b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b9061247b565b60405180910390fd5b6000610c7e610bb8565b9050610c8e8187878787876112eb565b60005b8451811015610e3f576000858281518110610caf57610cae612951565b5b602002602001015190506000858381518110610cce57610ccd612951565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d66906124bb565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e24919061273b565b9250508190555050505080610e38906128aa565b9050610c91565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610eb6929190612367565b60405180910390a4610ecc8187878787876112f3565b610eda8187878787876112fb565b505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f48906124fb565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611042919061239e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156110bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b69061247b565b60405180910390fd5b60006110c9610bb8565b905060006110d6856114e2565b905060006110e3856114e2565b90506110f38389898585896112eb565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561118a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611181906124bb565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461123f919061273b565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516112bc929190612596565b60405180910390a46112d2848a8a86868a6112f3565b6112e0848a8a8a8a8a61155c565b505050505050505050565b505050505050565b505050505050565b61131a8473ffffffffffffffffffffffffffffffffffffffff16611743565b156114da578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611360959493929190612283565b602060405180830381600087803b15801561137a57600080fd5b505af19250505080156113ab57506040513d601f19601f820116820180604052508101906113a89190611f23565b60015b611451576113b76129af565b806308c379a0141561141457506113cc612de5565b806113d75750611416565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140b91906123b9565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611448906123db565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf906123fb565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff81111561150157611500612980565b5b60405190808252806020026020018201604052801561152f5781602001602082028036833780820191505090505b509050828160008151811061154757611546612951565b5b60200260200101818152505080915050919050565b61157b8473ffffffffffffffffffffffffffffffffffffffff16611743565b1561173b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016115c19594939291906122eb565b602060405180830381600087803b1580156115db57600080fd5b505af192505050801561160c57506040513d601f19601f820116820180604052508101906116099190611f23565b60015b6116b2576116186129af565b806308c379a01415611675575061162d612de5565b806116385750611677565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166c91906123b9565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a9906123db565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611739576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611730906123fb565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461177290612847565b90600052602060002090601f01602090048101928261179457600085556117db565b82601f106117ad57805160ff19168380011785556117db565b828001600101855582156117db579182015b828111156117da5782518255916020019190600101906117bf565b5b5090506117e891906117ec565b5090565b5b808211156118055760008160009055506001016117ed565b5090565b600061181c611817846125e4565b6125bf565b9050808382526020820190508285602086028201111561183f5761183e6129d6565b5b60005b8581101561186f578161185588826119fb565b845260208401935060208301925050600181019050611842565b5050509392505050565b600061188c61188784612610565b6125bf565b905080838252602082019050828560208602820111156118af576118ae6129d6565b5b60005b858110156118fd57813567ffffffffffffffff8111156118d5576118d46129d1565b5b8086016118e28982611b07565b855260208501945060208401935050506001810190506118b2565b5050509392505050565b600061191a6119158461263c565b6125bf565b9050808382526020820190508285602086028201111561193d5761193c6129d6565b5b60005b8581101561196d57816119538882611b35565b845260208401935060208301925050600181019050611940565b5050509392505050565b600061198a61198584612668565b6125bf565b9050828152602081018484840111156119a6576119a56129db565b5b6119b1848285612805565b509392505050565b60006119cc6119c784612699565b6125bf565b9050828152602081018484840111156119e8576119e76129db565b5b6119f3848285612805565b509392505050565b600081359050611a0a81612e7b565b92915050565b600082601f830112611a2557611a246129d1565b5b8135611a35848260208601611809565b91505092915050565b600082601f830112611a5357611a526129d1565b5b8135611a63848260208601611879565b91505092915050565b600082601f830112611a8157611a806129d1565b5b8135611a91848260208601611907565b91505092915050565b600081359050611aa981612e92565b92915050565b600081359050611abe81612ea9565b92915050565b600081519050611ad381612ea9565b92915050565b600082601f830112611aee57611aed6129d1565b5b8135611afe848260208601611977565b91505092915050565b600082601f830112611b1c57611b1b6129d1565b5b8135611b2c8482602086016119b9565b91505092915050565b600081359050611b4481612ec0565b92915050565b60008060408385031215611b6157611b606129e5565b5b6000611b6f858286016119fb565b9250506020611b80858286016119fb565b9150509250929050565b600080600080600060a08688031215611ba657611ba56129e5565b5b6000611bb4888289016119fb565b9550506020611bc5888289016119fb565b945050604086013567ffffffffffffffff811115611be657611be56129e0565b5b611bf288828901611a6c565b935050606086013567ffffffffffffffff811115611c1357611c126129e0565b5b611c1f88828901611a6c565b925050608086013567ffffffffffffffff811115611c4057611c3f6129e0565b5b611c4c88828901611ad9565b9150509295509295909350565b600080600080600060a08688031215611c7557611c746129e5565b5b6000611c83888289016119fb565b9550506020611c94888289016119fb565b9450506040611ca588828901611b35565b9350506060611cb688828901611b35565b925050608086013567ffffffffffffffff811115611cd757611cd66129e0565b5b611ce388828901611ad9565b9150509295509295909350565b60008060008060808587031215611d0a57611d096129e5565b5b6000611d18878288016119fb565b945050602085013567ffffffffffffffff811115611d3957611d386129e0565b5b611d4587828801611a6c565b935050604085013567ffffffffffffffff811115611d6657611d656129e0565b5b611d7287828801611a6c565b925050606085013567ffffffffffffffff811115611d9357611d926129e0565b5b611d9f87828801611a3e565b91505092959194509250565b60008060408385031215611dc257611dc16129e5565b5b6000611dd0858286016119fb565b9250506020611de185828601611a9a565b9150509250929050565b60008060408385031215611e0257611e016129e5565b5b6000611e10858286016119fb565b9250506020611e2185828601611b35565b9150509250929050565b600080600060608486031215611e4457611e436129e5565b5b6000611e52868287016119fb565b9350506020611e6386828701611b35565b9250506040611e7486828701611b35565b9150509250925092565b60008060408385031215611e9557611e946129e5565b5b600083013567ffffffffffffffff811115611eb357611eb26129e0565b5b611ebf85828601611a10565b925050602083013567ffffffffffffffff811115611ee057611edf6129e0565b5b611eec85828601611a6c565b9150509250929050565b600060208284031215611f0c57611f0b6129e5565b5b6000611f1a84828501611aaf565b91505092915050565b600060208284031215611f3957611f386129e5565b5b6000611f4784828501611ac4565b91505092915050565b600060208284031215611f6657611f656129e5565b5b6000611f7484828501611b35565b91505092915050565b6000611f89838361224a565b60208301905092915050565b611f9e81612791565b82525050565b6000611faf826126da565b611fb98185612708565b9350611fc4836126ca565b8060005b83811015611ff5578151611fdc8882611f7d565b9750611fe7836126fb565b925050600181019050611fc8565b5085935050505092915050565b61200b816127a3565b82525050565b600061201c826126e5565b6120268185612719565b9350612036818560208601612814565b61203f816129ea565b840191505092915050565b6000612055826126f0565b61205f818561272a565b935061206f818560208601612814565b612078816129ea565b840191505092915050565b600061209060348361272a565b915061209b82612a08565b604082019050919050565b60006120b360288361272a565b91506120be82612a57565b604082019050919050565b60006120d660218361272a565b91506120e182612aa6565b604082019050919050565b60006120f960298361272a565b915061210482612af5565b604082019050919050565b600061211c602a8361272a565b915061212782612b44565b604082019050919050565b600061213f60258361272a565b915061214a82612b93565b604082019050919050565b600061216260328361272a565b915061216d82612be2565b604082019050919050565b6000612185602a8361272a565b915061219082612c31565b604082019050919050565b60006121a8601e8361272a565b91506121b382612c80565b602082019050919050565b60006121cb60298361272a565b91506121d682612ca9565b604082019050919050565b60006121ee60298361272a565b91506121f982612cf8565b604082019050919050565b600061221160288361272a565b915061221c82612d47565b604082019050919050565b600061223460218361272a565b915061223f82612d96565b604082019050919050565b612253816127fb565b82525050565b612262816127fb565b82525050565b600060208201905061227d6000830184611f95565b92915050565b600060a0820190506122986000830188611f95565b6122a56020830187611f95565b81810360408301526122b78186611fa4565b905081810360608301526122cb8185611fa4565b905081810360808301526122df8184612011565b90509695505050505050565b600060a0820190506123006000830188611f95565b61230d6020830187611f95565b61231a6040830186612259565b6123276060830185612259565b81810360808301526123398184612011565b90509695505050505050565b6000602082019050818103600083015261235f8184611fa4565b905092915050565b600060408201905081810360008301526123818185611fa4565b905081810360208301526123958184611fa4565b90509392505050565b60006020820190506123b36000830184612002565b92915050565b600060208201905081810360008301526123d3818461204a565b905092915050565b600060208201905081810360008301526123f481612083565b9050919050565b60006020820190508181036000830152612414816120a6565b9050919050565b60006020820190508181036000830152612434816120c9565b9050919050565b60006020820190508181036000830152612454816120ec565b9050919050565b600060208201905081810360008301526124748161210f565b9050919050565b6000602082019050818103600083015261249481612132565b9050919050565b600060208201905081810360008301526124b481612155565b9050919050565b600060208201905081810360008301526124d481612178565b9050919050565b600060208201905081810360008301526124f48161219b565b9050919050565b60006020820190508181036000830152612514816121be565b9050919050565b60006020820190508181036000830152612534816121e1565b9050919050565b6000602082019050818103600083015261255481612204565b9050919050565b6000602082019050818103600083015261257481612227565b9050919050565b60006020820190506125906000830184612259565b92915050565b60006040820190506125ab6000830185612259565b6125b86020830184612259565b9392505050565b60006125c96125da565b90506125d58282612879565b919050565b6000604051905090565b600067ffffffffffffffff8211156125ff576125fe612980565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561262b5761262a612980565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561265757612656612980565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561268357612682612980565b5b61268c826129ea565b9050602081019050919050565b600067ffffffffffffffff8211156126b4576126b3612980565b5b6126bd826129ea565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612746826127fb565b9150612751836127fb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612786576127856128f3565b5b828201905092915050565b600061279c826127db565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612832578082015181840152602081019050612817565b83811115612841576000848401525b50505050565b6000600282049050600182168061285f57607f821691505b6020821081141561287357612872612922565b5b50919050565b612882826129ea565b810181811067ffffffffffffffff821117156128a1576128a0612980565b5b80604052505050565b60006128b5826127fb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128e8576128e76128f3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156129ce5760046000803e6129cb6000516129fb565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160e01c9050919050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f5468652069647320616e6420616d6f756e747320617265206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b7f5468652069647320616e64207572697320617265206e6f74206d617463680000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600060443d1015612df557612e78565b612dfd6125da565b60043d036004823e80513d602482011167ffffffffffffffff82111715612e25575050612e78565b808201805167ffffffffffffffff811115612e435750505050612e78565b80602083010160043d038501811115612e60575050505050612e78565b612e6f82602001850186612879565b82955050505050505b90565b612e8481612791565b8114612e8f57600080fd5b50565b612e9b816127a3565b8114612ea657600080fd5b50565b612eb2816127af565b8114612ebd57600080fd5b50565b612ec9816127fb565b8114612ed457600080fd5b5056fea2646970667358221220d1479b92f1e0798169ebfdfb894e92a5951878e8795cd67ca79362a5856ebd3e64736f6c63430008070033";
    // 合约对应的abi
    String abi = "[{\"inputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"constructor\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"ApprovalForAll\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"indexed\": false,\"internalType\": \"uint256[]\",\"name\": \"values\",\"type\": \"uint256[]\"}],\"name\": \"TransferBatch\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"indexed\": false,\"internalType\": \"uint256\",\"name\": \"value\",\"type\": \"uint256\"}],\"name\": \"TransferSingle\",\"type\": \"event\"},{\"anonymous\": false,\"inputs\": [{\"indexed\": false,\"internalType\": \"string\",\"name\": \"value\",\"type\": \"string\"},{\"indexed\": true,\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"URI\",\"type\": \"event\"},{\"inputs\": [],\"name\": \"_owner\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"}],\"name\": \"balanceOf\",\"outputs\": [{\"internalType\": \"uint256\",\"name\": \"\",\"type\": \"uint256\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address[]\",\"name\": \"accounts\",\"type\": \"address[]\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"}],\"name\": \"balanceOfBatch\",\"outputs\": [{\"internalType\": \"uint256[]\",\"name\": \"\",\"type\": \"uint256[]\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"account\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"}],\"name\": \"isApprovedForAll\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"_to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"string[]\",\"name\": \"uris\",\"type\": \"string[]\"}],\"name\": \"mint\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256[]\",\"name\": \"ids\",\"type\": \"uint256[]\"},{\"internalType\": \"uint256[]\",\"name\": \"amounts\",\"type\": \"uint256[]\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeBatchTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"from\",\"type\": \"address\"},{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"},{\"internalType\": \"bytes\",\"name\": \"data\",\"type\": \"bytes\"}],\"name\": \"safeTransferFrom\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"operator\",\"type\": \"address\"},{\"internalType\": \"bool\",\"name\": \"approved\",\"type\": \"bool\"}],\"name\": \"setApprovalForAll\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"bytes4\",\"name\": \"interfaceId\",\"type\": \"bytes4\"}],\"name\": \"supportsInterface\",\"outputs\": [{\"internalType\": \"bool\",\"name\": \"\",\"type\": \"bool\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"to\",\"type\": \"address\"},{\"internalType\": \"uint256\",\"name\": \"id\",\"type\": \"uint256\"},{\"internalType\": \"uint256\",\"name\": \"amount\",\"type\": \"uint256\"}],\"name\": \"transferArtNFT\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"uint256\",\"name\": \"_id\",\"type\": \"uint256\"}],\"name\": \"uri\",\"outputs\": [{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\"stateMutability\": \"view\",\"type\": \"function\"}]";

    /**
     * ERC1155合约部署，调用测试
     * @throws Exception 
     */
    @Test
    public void testERC1155() throws Exception {
    	
    	
    	// =======> step1： 为用户A和B生成私钥和地址
    	AccountInfo infoA = createAccount();
    	useraAddress = infoA.getAddress();
    	useraPrivateKey = infoA.getPrivateKey();
    	
    	AccountInfo infoB = createAccount();
    	userbAddress = infoB.getAddress();
    	userbPrivateKey = infoB.getPrivateKey();
    	
    	// =======>  step2: 通过管理员部署合约，部署好之后，合约就运行区块链内存中，后续可以直接调用，不用每次都调用部署合约这一步操作（除非业务上有需要）
        // 部署合约, 参数： 平行链合约名， 签名地址，签名私钥
        String hash = deployContract(paraName, managerAddress, managerPrivateKey);
        
        // 计算上一步部署到链上的合约地址
        String contractAddress = TransactionUtil.convertExectoAddr(managerAddress + hash.substring(2));
        System.out.println("部署好的合约地址 = " + contractAddress);
        
        // =======>  step3: 调用合约发行NFT,假设为2件游戏道具各生成100个NFT资产, id从10000开始        
        int lenght = 2;
        // tokenId数组
        int[] ids = new int[lenght];
        // 同一个tokenid发行多少份
        int[] amounts = new int[lenght];
        // 每一个tokenid对应的URI信息（一般对应存放图片的描述信息，图片内容的一个url）
        String[] uris = new String[lenght];
        for (int i = 0; i < lenght; i++) {
        	ids[i] = 10000 + i;
        	amounts[i] = 100;
        	// 例子为了简化处理，让所有ID都固定一个地址，
        	uris[i] = "http://www.baidu.com";
        }
        
        // 代扣交易需要对平行链合约地址做一个处理
        String execer = paraName + "evm";
        // 平行链合约地址计算(平行链title前缀+合约名称)
        String paracontractAddress = client.convertExectoAddr(execer);
        
        // 构造合约调用, mint对应solidity合约里的方法名， useraAddress, ids, amounts这三项对应合约里的参数。  将NFT发行在用户A地址下
        byte[] initNFT = EvmUtil.encodeParameter(abi, "mint", useraAddress, ids, amounts, uris);
    	// 构造发行NFT交易体，用户A对此笔交易签名：表示用户A有发行NFT的权限
    	String txEncode = EvmUtil.callEvmContractWithhold(initNFT,"", 0, execer, useraPrivateKey, contractAddress);
    	// 再调用代扣交易方法，用代扣私钥对交易组做签名
    	createNobalance(txEncode, paracontractAddress, useraPrivateKey, withholdPrivateKey);
        
        // =======>  查询用户A地址下的余额
        byte[] packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[0] + "余额");
        
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[1]);
        queryContract(packAbiGet, contractAddress, "转账前用户A,NFTID=" + ids[1] + "余额");
        
        // =======>  从A地址向B地址转账,使用代扣交易

        // 用户A将第1个NFT中的50个转给用户B
    	byte[] transfer = EvmUtil.encodeParameter(abi, "transferArtNFT", userbAddress, ids[0], 50);
    	// 构造转账交易体，先用用户A对此笔交易签名，
    	txEncode = EvmUtil.callEvmContractWithhold(transfer,"", 0, execer, useraPrivateKey, contractAddress);
    	// 再调用代扣交易方法，用代扣私钥对交易组做签名
    	createNobalance(txEncode, paracontractAddress, useraPrivateKey, withholdPrivateKey);

        
        // =======>  查询用户A地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", useraAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户A,NFTID=" + ids[0] + "余额");
        
        // =======>  查询用户B地址下的余额
        packAbiGet = EvmUtil.encodeParameter(abi, "balanceOf", userbAddress, ids[0]);
        queryContract(packAbiGet, contractAddress, "转账后用户B,NFTID=" + ids[0] + "余额");
        
        // =======>  查询指定tokenid的uri信息
        packAbiGet = EvmUtil.encodeParameter(abi, "uri", ids[0]);
        queryContractString(packAbiGet, contractAddress, "NFTID=" + ids[0] + "的URI信息");
        
    }
    
    /**
     * Step1: 生成私钥，地址
     * 一般在用户注册时调用，生成后在数据库中和用户信息绑定，后续直接从库中查出来使用
     */
    private AccountInfo createAccount() {
    	Account account = new Account();
		AccountInfo accountInfo = account.newAccountLocal();
		return accountInfo;
    }
    
    /**
     * Step2:部署合约
     * @throws Exception
     */
    private String deployContract(String execer, String address, String privateKey) throws Exception {

        // 部署合约
        String txEncode;
        String txhash = "";
        QueryTransactionResult txResult = new QueryTransactionResult();
        
        byte[] code = ByteUtil.merge(HexUtil.fromHexString(codes), abi.getBytes());
        
    	// TODO: 估算部署合约GAS费， 实际应用过程中，不建议在业务代码中直接调用gas费， 只是做预估使用。  实际可以在代码里设置一个大于这个值的数（合约部署手续费一般都高于合约调用，所以这边单独估算）
        String evmCode = EvmUtil.getCreateEvmEncode(code, "", "deploy ERC1155 contract", execer);
        long gas = client.queryEVMGas("evm", evmCode, address);
        System.out.println("Gas fee is:" + gas);
        
        // 通过合约code, 管理员私钥，平行链名称+evm,手续费等参数构造部署合约交易，并签名
        txEncode = EvmUtil.createEvmContract(code, "", "evm-sdk-test", privateKey, execer, gas);
        // 将构造并签好名的交易通过rpc接口发送到平行链上
        txhash = client.submitTransaction(txEncode);
        System.out.println("部署合约交易hash = " + txhash);
        
        // BTY平均3-5秒一个区块确认， 需要延时去查结果
        Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			txResult = client.queryTransaction(txhash);
			if(txResult == null) {
				Thread.sleep(3000);
				continue;
			}			
			break;
		}
		
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约部署成功");

		} else {
			System.out.println("合约部署失败，一般失败原因可能是因为地址下手续费不够");
		}
		
		return txhash;
    }
    
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContract(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToAlgorism(HexUtil.removeHexHeader(rawData)));
    }
    
    /**
     * 查询方法
     * @param queryAbi
     * @param contractAddress
     * @throws Exception 
     */
    private void queryContractString(byte[] queryAbi, String contractAddress, String title) throws Exception {
        // 查询用户A和用户B地址下的资产余额
        JSONObject query = client.callEVMAbi(contractAddress, HexUtil.toHexString(queryAbi));
        JSONObject output = query.getJSONObject("result");
        String rawData = output.getString("rawData");
        System.out.println(title + ": " + HexUtil.hexStringToString(HexUtil.removeHexHeader(rawData)).replaceAll("\u0000",""));
    }
       
    
    /**
     * 构建代扣手续费交易
     * 
     * @param txEncode
     * @param contranctAddress
     * @return
     * @throws InterruptedException
     * @throws IOException 
     */
    private String createNobalance(String txEncode, String contranctAddress, String userPrivatekey, String withHoldPrivateKey) throws Exception {
        String createNoBalanceTx = client.createNoBalanceTx(txEncode, "");
	    // 解析交易
	    List<DecodeRawTransaction> decodeRawTransactions = client.decodeRawTransaction(createNoBalanceTx);
	    
	    String hexString = TransactionUtil.signDecodeTx(decodeRawTransactions, contranctAddress, userPrivatekey, withHoldPrivateKey);
	    String submitTransaction = client.submitTransaction(hexString);
	    System.out.println("代扣hash= " + submitTransaction);
	    
	    String nextString = null;
        QueryTransactionResult txResult = new QueryTransactionResult();

		Thread.sleep(5000);
		for (int tick = 0; tick < 20; tick++){
			QueryTransactionResult result = client.queryTransaction(submitTransaction);
			if(result == null) {
				Thread.sleep(3000);
				continue;
			}

			System.out.println("next:" + result.getTx().getNext());
			QueryTransactionResult nextResult = client.queryTransaction(result.getTx().getNext());
			System.out.println("ty:" + nextResult.getReceipt().getTyname());
			nextString = result.getTx().getNext();
			break;
		}
		
		
		txResult = client.queryTransaction(nextString);
		if ("ExecOk".equals(txResult.getReceipt().getTyname())) {
			System.out.println("合约调用成功");
			
		} else {
			System.out.println("合约调用失败，一般失败原因可能是因为地址下手续费不够");
		}
		return nextString;
    }
    
}
